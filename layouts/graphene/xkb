
partial alphanumeric_keys
xkb_symbols "graphene" {
    name[Group1]= "English (Graphene)";

    // -- Top Row --
    key <TLDE> { [ NoSymbol ] };
    key <AE01> { [ leftarrow  ] };
    key <AE02> { [ rightarrow ] };
    replace key <AE03> { [  Alt_L,         Meta_L ] };
    key <AE04> { [        percent,        percent,      braceright ] };
    key <AE05> { [ endash ] };
    key <AE06> { [ NoSymbol ] };
    key <AE07> { [ NoSymbol ] };
    key <AE08> { [ ellipsis ] };
    key <AE09> { [         emdash,   bracketright,     bracketright ] };
    replace key <AE10> { [  Alt_R,         Meta_R ] };
    key <AE11> { [            bar,     parenright,       parenright ] };
    key <AE12> { [ enfilledcircbullet ] }; // For where formatting isn't supported

    // -- First Row --
    key <AD01> { [            b,            B,           exclam ] };
    key <AD02> { [            l,            L,        braceleft ] };
    key <AD03> { [            d,            D,      bracketleft ] };
    key <AD04> { [            w,            W,       numbersign ] };
    key <AD05> { [            z,            Z,            equal ] };
    key <AD06> { [       Escape,       	 Menu,             Menu ] };
    key <AD07> { [   apostrophe,     quotedbl,      asciicircum ] };
    key <AD08> { [            f,            F,               at ] };
    key <AD09> { [            o,            O,        parenleft ] };
    key <AD10> { [            u,            U,           dollar ] };
    key <AD11> { [            j,            J,            grave ] };
    key <AD12> { [    semicolon,        colon ] };
    key <BKSL> { [ Insert ] };

    // -- Home Row --
    key <AC01> { [            n,            N,                1 ] };
    key <AC02> { [            r,            R,       asciitilde ] };
    key <AC03> { [            t,            T,           Return ] };
    key <AC04> { [            s,            S,                0 ] };
    key <AC05> { [            g,            G,        ampersand ] };
    key <AC06> { type= "SHIFT_PRESERVES_LEVEL1", [         Home,         Home,          Page_Up ] };
    key <AC07> { [            y,            Y,        backslash ] };
    key <AC08> { type= "FOUR_LEVEL_SHIFT_PRESERVE", [            h,            H,             Left ] };
    key <AC09> { type= "FOUR_LEVEL_SHIFT_PRESERVE", [            a,            A,               Up ] };
    key <AC10> { type= "FOUR_LEVEL_SHIFT_PRESERVE", [            e,            E,             Down ] };
    key <AC11> { type= "FOUR_LEVEL_SHIFT_PRESERVE", [            i,            I,            Right ] };
    key <RTRN> { [        comma,     question ] };
    // BackSpace ↔ Caps-Lock
    key <CAPS> { [  BackSpace,      BackSpace,       Delete ] };
    key <BKSP> { [ Caps_Lock ] };
    modifier_map Lock { <BKSP> };

    // -- Bottom Row --
    key <AB01> { [            x,            X,            2 ] };
    key <AB02> { [            m,            M,            3 ] };
    key <AB03> { [            c,            C,            4 ] };
    key <AB04> { [            q,            Q,            5 ] };
    key <AB05> { [            v,            V,         plus ] };
    key <AB06> { type= "SHIFT_PRESERVES_LEVEL1", [          End,    Page_Down,          End ] };
    key <AB07> { [            k,            K,     asterisk ] };
    key <AB08> { [            p,            P,            6 ] };
    key <AB09> { [       period,      greater,            7 ] };
    key <AB10> { [        minus,   underscore,            8 ] };
    replace key <RTSH> { [ slash,        less,            9 ] }; // Assign the right shift for Wide-mod


    // -- Modifier Cluster --
    // — Left —
    // - three-way swap -

    // Control → Alt
    replace key <LCTL> { [ Alt_L, Meta_L ] };
    modifier_map Mod1  { <LCTL>, <AE03>, <AE10> };

    // Shift → Control
    replace key <LFSH> { [ Control_L ] };
    modifier_map Control { <LFSH> };

    // Alt → Shift
    replace key <LALT> { [ ISO_Level2_Latch ] };
    modifier_map Shift   { <LALT> };
    
    // — Right —
    
    // Alt → AltGr
    key <RALT> { [ ISO_Level3_Shift ] };
    modifier_map Mod5 { <RALT> };
};

